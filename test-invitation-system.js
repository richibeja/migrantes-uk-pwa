// Test del sistema de invitaciones
const { invitationSystem } = require('./src/lib/invitation-system.ts');
const { dashboardAccessSystem } = require('./src/lib/dashboard-access.ts');

console.log('ðŸ§ª PROBANDO SISTEMA DE INVITACIONES...\n');

// 1. Crear una invitaciÃ³n de prueba
console.log('1. Creando invitaciÃ³n de prueba...');
const invitation = invitationSystem.createInvitation('admin', 'premium', 1);
console.log('âœ… InvitaciÃ³n creada:', invitation);

// 2. Validar el cÃ³digo
console.log('\n2. Validando cÃ³digo...');
const validation = invitationSystem.validateInvitation(invitation.code);
console.log('âœ… ValidaciÃ³n:', validation);

// 3. Simular uso del cÃ³digo
console.log('\n3. Simulando uso del cÃ³digo...');
const userId = 'test_user_123';
const useResult = invitationSystem.useInvitation(invitation.code, userId);
console.log('âœ… Resultado del uso:', useResult);

// 4. Otorgar acceso al dashboard
console.log('\n4. Otorgando acceso al dashboard...');
const accessResult = dashboardAccessSystem.grantDashboardAccess(userId, invitation.code, 'premium');
console.log('âœ… Resultado del acceso:', accessResult);

// 5. Verificar acceso al dashboard
console.log('\n5. Verificando acceso al dashboard...');
const hasAccess = dashboardAccessSystem.hasDashboardAccess(userId);
console.log('âœ… Tiene acceso:', hasAccess);

// 6. Verificar sesiÃ³n
console.log('\n6. Verificando sesiÃ³n...');
const sessionCheck = dashboardAccessSystem.isDashboardSessionValid();
console.log('âœ… SesiÃ³n vÃ¡lida:', sessionCheck);

console.log('\nðŸŽ‰ Â¡SISTEMA FUNCIONANDO CORRECTAMENTE!');
